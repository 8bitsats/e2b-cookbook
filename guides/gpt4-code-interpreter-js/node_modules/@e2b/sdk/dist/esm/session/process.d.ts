import { EnvVars } from './envVars';
import { CallOpts, SessionConnection } from './sessionConnection';
export declare const processService = "process";
/**
 * A message from a process.
 */
export declare class ProcessMessage {
    readonly line: string;
    /**
     * Unix epoch in nanoseconds
     */
    readonly timestamp: number;
    readonly error: boolean;
    constructor(line: string, 
    /**
     * Unix epoch in nanoseconds
     */
    timestamp: number, error: boolean);
}
/**
 * Output from a process.
 */
export declare class ProcessOutput {
    private readonly delimiter;
    private readonly messages;
    private _error;
    /**
     * Whether the process has errored.
     */
    get error(): boolean;
    /**
     * The stdout from the process.
     */
    get stdout(): string;
    /**
     * The stderr from the process.
     */
    get stderr(): string;
    addStdout(message: ProcessMessage): void;
    addStderr(message: ProcessMessage): void;
    private insertByTimestamp;
}
/**
 * A process running in the environment.
 */
export declare class Process {
    readonly processID: string;
    private readonly session;
    private readonly triggerExit;
    readonly finished: Promise<ProcessOutput>;
    readonly output: ProcessOutput;
    constructor(processID: string, session: SessionConnection, triggerExit: () => void, finished: Promise<ProcessOutput>, output: ProcessOutput);
    /**
     * Kills the process.
     */
    kill(): Promise<void>;
    /**
     * Sends data to the process stdin.
     *
     * @param data Data to send
     * @param opts Call options
     * @param {timeout} [opts.timeout] Timeout in milliseconds (default is 60 seconds)
     */
    sendStdin(data: string, opts?: CallOpts): Promise<void>;
}
export interface ProcessOpts {
    cmd: string;
    onStdout?: (out: ProcessMessage) => void;
    onStderr?: (out: ProcessMessage) => void;
    onExit?: () => void;
    envVars?: EnvVars;
    cwd?: string;
    /** @deprecated use cwd instead */
    rootDir?: string;
    processID?: string;
    timeout?: number;
}
export interface ProcessManager {
    readonly start: (opts: ProcessOpts) => Promise<Process>;
}
