import { components } from '../api';
import { codeSnippetService } from './codeSnippet';
import { filesystemService } from './filesystem';
import { processService } from './process';
import { terminalService } from './terminal';
type SubscriptionHandler = (result: any) => void;
type Service = typeof processService | typeof codeSnippetService | typeof filesystemService | typeof terminalService;
interface Logger {
    debug?: (message: string, ...args: unknown[]) => void;
    info?: (message: string, ...args: unknown[]) => void;
    warn?: (message: string, ...args: unknown[]) => void;
    error?: (message: string, ...args: unknown[]) => void;
}
export interface SessionConnectionOpts {
    id: string;
    apiKey?: string;
    cwd?: string;
    logger?: Logger;
    __debug_hostname?: string;
    __debug_port?: number;
    __debug_devEnv?: 'remote' | 'local';
}
export interface CallOpts {
    timeout?: number;
}
export declare class SessionConnection {
    readonly opts: SessionConnectionOpts;
    protected readonly logger: Logger;
    protected session?: components['schemas']['Session'];
    protected isOpen: boolean;
    private readonly apiKey;
    private readonly rpc;
    private subscribers;
    constructor(opts: SessionConnectionOpts);
    /**
     * Get the hostname for the session or for the specified session's port.
     *
     * `getHostname` method requires `this` context - you may need to bind it.
     *
     * @param port Specify if you want to connect to a specific port of the session
     * @returns Hostname of the session or session's port
     */
    getHostname(port?: number): string | undefined;
    /**
     * Close the connection to the session
     *
     * `close` method requires `this` context - you may need to bind it.
     */
    close(): Promise<void>;
    /**
     * Open a connection to a new session
     *
     * `open` method requires `this` context - you may need to bind it.
     * @param opts Call options
     * @param {timeout} [opts.timeout] Timeout in milliseconds (default is 60 seconds)
     */
    open(opts: CallOpts): Promise<this>;
    call(service: Service, method: string, params?: any[], opts?: CallOpts): Promise<unknown>;
    handleSubscriptions<T extends (ReturnType<SessionConnection['subscribe']> | undefined)[]>(...subs: T): Promise<{
        [P in keyof T]: Awaited<T[P]>;
    }>;
    unsubscribe(subID: string): Promise<void>;
    subscribe(service: Service, handler: SubscriptionHandler, method: string, ...params: any[]): Promise<string>;
    private handleNotification;
    private refresh;
}
export {};
