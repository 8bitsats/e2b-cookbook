import { EnvVars } from './envVars';
import { SessionConnection } from './sessionConnection';
export declare const terminalService = "terminal";
export declare class TerminalOutput {
    private _data;
    get data(): string;
    addData(data: string): void;
}
/**
 * A terminal session running in the environment.
 */
export declare class Terminal {
    readonly terminalID: string;
    private readonly session;
    private readonly triggerExit;
    readonly finished: Promise<TerminalOutput>;
    readonly output: TerminalOutput;
    constructor(terminalID: string, session: SessionConnection, triggerExit: () => void, finished: Promise<TerminalOutput>, output: TerminalOutput);
    get data(): string;
    /**
     * Kills the terminal session.
     */
    kill(): Promise<void>;
    /**
     * Sends data to the terminal standard input.
     *
     * @param data Data to send
     */
    sendData(data: string): Promise<void>;
    /**
     * Resizes the terminal tty.
     *
     * @param cols Number of columns
     * @param rows Number of rows
     */
    resize({ cols, rows }: {
        cols: number;
        rows: number;
    }): Promise<void>;
}
export type TerminalOpts = {
    onData: (data: string) => void;
    onExit?: () => void;
    size: {
        cols: number;
        rows: number;
    };
    terminalID?: string;
    /**
     * If the `cmd` parameter is defined it will be executed as a command
     * and this terminal session will exit when the command exits.
     */
    cmd?: string;
    /**
     * Working directory where will the terminal start.
     */
    cwd?: string;
    /**
     * @deprecated use cwd instead
     */
    rootDir?: string;
    /**
     * Environment variables that will be accessible inside of the terminal.
     */
    envVars?: EnvVars;
    /**
     * Timeout in milliseconds (default is 60 seconds)
     */
    timeout?: number;
};
export interface TerminalManager {
    readonly start: (opts: TerminalOpts) => Promise<Terminal>;
}
